Photo mosaic  Work-flow, Use case
---------------------------------

1. A user selects a local image file.

2. The app loads that image, divides the image into tiles, computes the average
   color of each tile, fetches a tile from the server for that color, and
   composites the results into a photomosaic of the original image.
   (The server part is to just add more complexity. 
   Svg objects could other-wise be created on the client and rendered.)

3. The composited photomosaic will be displayed according to the following
   constraints:
    - tiles will be rendered a complete row at a time (you would never
      see a row with some completed tiles and some incomplete)
    - the mosaic would be rendered from the top row to the bottom row.

4. The app makes effective use of parallelism and asynchrony.

The project skeleton contains a lightweight server (written in node) for
serving the client app and the tile images. To start it, run npm start.
  /              serves mosaic.html
  /js/*          serves static resources
  /color/<hex>   serves an SVG mosaic tile for color <hex>.  e.g., /color/0e4daa

The tile size should be configurable via the code constants in js/mosaic.js.
The project skeleton is already set up to include those constants in both the
mosaic client and the mosaic server.  The default size is 16x16.

I avoided any 3rd party libraries, and kept it strictly vanilla JavaScript, 
so that I could properly benchmark perfromance against the use of workers.

I had fun working on this!